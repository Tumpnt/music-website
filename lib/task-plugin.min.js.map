{"version":3,"file":"task-plugin.min.js","sources":["../src/task.js","../src/index.js"],"sourcesContent":["export class Task {\r\n\r\n\tconstructor(inputs, component, worker) {\r\n\t\tthis.inputs = inputs;\r\n\t\tthis.component = component;\r\n\t\tthis.worker = worker;\r\n\t\tthis.next = [];\r\n\t\tthis.outputData = null;\r\n\t\tthis.closed = [];\r\n\r\n\t\tthis.getInputs('option').forEach(key => {\r\n\t\t\tthis.inputs[key].forEach(con => {\r\n\t\t\t\tcon.task.next.push({ key: con.key, task: this });\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetInputs(type) {\r\n\t\treturn Object.keys(this.inputs)\r\n\t\t\t.filter(key => this.inputs[key][0])\r\n\t\t\t.filter(key => {\r\n\t\t\t\tlet t = this.inputs[key][0].type;\r\n\t\t\t\tif (Array.isArray(t))\r\n\t\t\t\t\treturn t.includes(type);\r\n\t\t\t\telse\r\n\t\t\t\t\treturn t === type;\r\n\t\t\t});\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.outputData = null;\r\n\t}\r\n\r\n\tasync run(data, needReset = true, garbage = [], propagate = true) {\r\n\t\tif (needReset)\r\n\t\t\tgarbage.push(this);\r\n\r\n\t\t//if (!this.outputData) {\r\n\t\tvar inputs = {};\r\n\r\n\t\tawait Promise.all(this.getInputs('output').map(async key => {\r\n\t\t\tinputs[key] = await Promise.all(this.inputs[key].map(async con => {\r\n\t\t\t\tif (con) {\r\n\t\t\t\t\tawait con.task.run(data, false, garbage, false);\r\n\t\t\t\t\treturn con.task.outputData[con.key];\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}));\r\n\r\n\t\tthis.outputData = await this.worker(this, inputs, data);\r\n\r\n\t\tif (propagate)\r\n\t\t\tawait Promise.all(\r\n\t\t\t\tthis.next\r\n\t\t\t\t\t.filter(f => !this.closed.includes(f.key))\r\n\t\t\t\t\t.map(async f =>\r\n\t\t\t\t\t\tawait f.task.run(data, false, garbage)\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\t\t//}\r\n\r\n\t\tif (needReset)\r\n\t\t\tgarbage.map(t => t.reset());\r\n\t}\r\n\r\n\tclone(root = true, oldTask, newTask) {\r\n\t\tconst inputs = Object.assign({}, this.inputs);\r\n\r\n\t\tif (root) // prevent of adding this task to `next` property of predecessor\r\n\t\t\tthis.getInputs('option').map(key => delete inputs[key]);\r\n\t\telse // replace old tasks with new copies\r\n\t\t\tObject.keys(inputs).map(key => {\r\n\t\t\t\tinputs[key] = inputs[key].map(con => ({\r\n\t\t\t\t\t...con,\r\n\t\t\t\t\ttask: con.task === oldTask ? newTask : con.task\r\n\t\t\t\t}));\r\n\t\t\t});\r\n\r\n\t\tconst task = new Task(inputs, this.component, this.worker);\r\n\r\n\t\t// manually add a copies of follow tasks\r\n\t\ttask.next = this.next.map(n => ({ key: n.key, task: n.task.clone(false, this, task) }));\r\n\r\n\t\treturn task;\r\n\t}\r\n}","import { Task } from './task';\r\n\r\nfunction install(editor) {\r\n\r\n\teditor.on('componentregister', component => {\r\n\t\tif (!component.task)\r\n\t\t\tthrow 'Task plugin requires a task property in component';\r\n\t\tif (component.task.outputs.constructor !== Object)\r\n\t\t\tthrow 'The \"outputs\" field must be an object whose keys correspond to the Output\\'s keys';\r\n\r\n\t\tconst taskWorker = component.worker;\r\n\t\tconst taskOptions = component.task;\r\n\r\n\t\tcomponent.worker = (node, inputs, outputs) => {\r\n\t\t\tconst task = new Task(inputs, component, (ctx, inps, data) => {\r\n\t\t\t\treturn taskWorker.call(ctx, node, inps, data);\r\n\t\t\t});\r\n\r\n\t\t\tif (taskOptions.init)\r\n\t\t\t\ttaskOptions.init.call(component, task, node);\r\n\r\n\t\t\tObject.keys(taskOptions.outputs).map(key => {\r\n\t\t\t\toutputs[key] = { type: taskOptions.outputs[key], key, task };\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t});\r\n}\r\n\r\nexport { Task } from './task';\r\nexport default {\r\n\tname: 'task',\r\n\tinstall\r\n};"],"names":["Task","inputs","component","worker","next","outputData","closed","getInputs","forEach","key","_this","con","task","push","type","Object","keys","this","filter","_this2","t","Array","isArray","includes","data","garbage","propagate","needReset","Promise","all","map","_this3","run","f","reset","root","oldTask","newTask","assign","n","clone","_this4","name","install","editor","on","outputs","constructor","taskWorker","taskOptions","node","ctx","inps","call","init"],"mappings":";;;;;usOAAaA,EAAb,sBAEaC,EAAQC,EAAWC,yHACzBF,OAASA,OACTC,UAAYA,OACZC,OAASA,OACTC,KAAO,QACPC,WAAa,UACbC,OAAS,QAETC,UAAU,UAAUC,QAAQ,SAAAC,GAChCC,EAAKT,OAAOQ,GAAKD,QAAQ,SAAAG,GACxBA,EAAIC,KAAKR,KAAKS,KAAK,CAAEJ,IAAKE,EAAIF,IAAKG,KAAMF,mEAKlCI,qBACFC,OAAOC,KAAKC,KAAKhB,QACtBiB,OAAO,SAAAT,UAAOU,EAAKlB,OAAOQ,GAAK,KAC/BS,OAAO,SAAAT,OACHW,EAAID,EAAKlB,OAAOQ,GAAK,GAAGK,YACxBO,MAAMC,QAAQF,GACVA,EAAEG,SAAST,GAEXM,IAAMN,yCAKXT,WAAa,gEAGTmB,wHAAwBC,iCAAU,GAAIC,sCAAhCC,uCAEdF,EAAQZ,KAAKI,MAGVhB,EAAS,YAEP2B,QAAQC,IAAIZ,KAAKV,UAAU,UAAUuB,+CAAI,WAAMrB,kGAChCmB,QAAQC,IAAIE,EAAK9B,OAAOQ,GAAKqB,+CAAI,WAAMnB,qFACtDA,kBACGA,EAAIC,KAAKoB,IAAIR,GAAM,EAAOC,GAAS,kDAClCd,EAAIC,KAAKP,WAAWM,EAAIF,8GAHjCR,EAAOQ,kIAQgBQ,KAAKd,OAAOc,KAAMhB,EAAQuB,kBAA7CnB,kBAEDqB,mBACGE,QAAQC,IACbZ,KAAKb,KACHc,OAAO,SAAAe,UAAMF,EAAKzB,OAAOiB,SAASU,EAAExB,OACpCqB,+CAAI,WAAMG,kGACJA,EAAErB,KAAKoB,IAAIR,GAAM,EAAOC,oKAK9BE,GACHF,EAAQK,IAAI,SAAAV,UAAKA,EAAEc,qJAGfC,uCAAaC,8BAASC,8BACrBpC,EAASc,OAAOuB,OAAO,GAAIrB,KAAKhB,QAElCkC,OACE5B,UAAU,UAAUuB,IAAI,SAAArB,iBAAcR,EAAOQ,KAElDM,OAAOC,KAAKf,GAAQ6B,IAAI,SAAArB,GACvBR,EAAOQ,GAAOR,EAAOQ,GAAKqB,IAAI,SAAAnB,eAC1BA,GACHC,KAAMD,EAAIC,OAASwB,EAAUC,EAAU1B,EAAIC,eAIxCA,EAAO,IAAIZ,EAAKC,EAAQgB,KAAKf,UAAWe,KAAKd,eAGnDS,EAAKR,KAAOa,KAAKb,KAAK0B,IAAI,SAAAS,SAAM,CAAE9B,IAAK8B,EAAE9B,IAAKG,KAAM2B,EAAE3B,KAAK4B,OAAM,EAAOC,EAAM7B,MAEvEA,oCAnFT,SC8Be,CACd8B,KAAM,OACNC,QA9BD,SAAiBC,GAEhBA,EAAOC,GAAG,oBAAqB,SAAA3C,OACzBA,EAAUU,KACd,KAAM,uDACHV,EAAUU,KAAKkC,QAAQC,cAAgBhC,OAC1C,KAAM,wFAEDiC,EAAa9C,EAAUC,OACvB8C,EAAc/C,EAAUU,KAE9BV,EAAUC,OAAS,SAAC+C,EAAMjD,EAAQ6C,OAC3BlC,EAAO,IAAIZ,EAAKC,EAAQC,EAAW,SAACiD,EAAKC,EAAM5B,UAC7CwB,EAAWK,KAAKF,EAAKD,EAAME,EAAM5B,KAGrCyB,EAAYK,MACfL,EAAYK,KAAKD,KAAKnD,EAAWU,EAAMsC,GAExCnC,OAAOC,KAAKiC,EAAYH,SAAShB,IAAI,SAAArB,GACpCqC,EAAQrC,GAAO,CAAEK,KAAMmC,EAAYH,QAAQrC,GAAMA,IAAAA,EAAKG,KAAAA"}